#!/usr/bin/env python
# encoding: utf-8
'''
anaconda -- shortdesc

anaconda is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2018 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
from datetime import datetime
from optparse import OptionParser

from CodonsTable import CodonsTable

__all__ = []
__version__ = 0.1
__date__ = '2018-02-09'
__updated__ = '2018-02-09'



def main(argv=None):
	'''Command line options.'''

	program_name = os.path.basename(sys.argv[0])
	program_version = "v{}".format(__version__)
	program_build_date = "{}".format(__updated__)

	program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
	#program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
	program_longdesc = '''''' # optional - give further explanation about what the program does
	program_license = "Copyright 2018 user_name (organization_name)                                            \
				Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

	if argv is None:
		argv = sys.argv[1:]
	try:
		# setup option parser
		parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
		parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
		parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
#		parser.add_option("-d", "--date", dest="date_in", default=datetime.now(), help="set date [default: today date]", metavar="dd/mm/yyyy")
		parser.add_option("-v", "--verbose", dest="verbose", action="count", default=0, help="set verbosity level [default: 0]")

		# set defaults
		parser.set_defaults(outfile="./out.csv", infile="./sequence.txt")

		# process options
		(opts, args) = parser.parse_args(argv)
		
		#### print verbose
		if (opts.verbose > 0):
			if opts.verbose > 0:
				print("verbosity level = %d" % opts.verbose)
			if opts.infile:
				print("infile = %s" % opts.infile)
			if opts.outfile:
				print("outfile = %s" % opts.outfile)
# 		if opts.date_in:
# 			print("datetime {}".format(opts.date_in))
			
		# MAIN BODY #
		if (not os.path.exists(opts.infile)):
			print("Error: file does not exist " + opts.infile)
			return 1
		
		### count codons
		codons_table = CodonsTable()
		codons_table.count_codons(opts.infile)
		
		## save results
		codons_table.save_table_in_file(opts.outfile)
		print('File saved: ' + opts.outfile)
		return 0
	
	except Exception as e:
		indent = len(program_name) * " "
		sys.stderr.write(program_name + ": " + repr(e) + "\n")
		sys.stderr.write(indent + "  for help use --help")
		return 2


if __name__ == "__main__":

	sys.exit(main())
